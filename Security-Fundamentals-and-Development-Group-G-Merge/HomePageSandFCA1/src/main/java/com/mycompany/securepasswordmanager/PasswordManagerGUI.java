/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.securepasswordmanager;

import javax.swing.JOptionPane;

/**
 *
 * @author liamf
 */
public class PasswordManagerGUI extends javax.swing.JFrame {

    //variables
    private PasswordManager passwordManager;
    private int passwordCount;

    public PasswordManagerGUI() {
        initComponents();
        passwordManager = new PasswordManager();//initiliase dbManager
        passwordCount = passwordManager.getPasswordCount();//get no. of passwords in DB

        loadAllPasswords();//when started display all saved&encrypted passwords in the DB
        updatePasswordLabel();//this method shows how many passwords have been saved e.g "Saved PAsswords: 3"
    }

    private void addPassword(String domain, String plainPassword) {
        passwordManager.addPassword(domain, plainPassword);//adds the password to manager
        passwordCount++;
        loadAllPasswords();
        updatePasswordLabel();//updates the no. of passwords counted
    }

    private void loadAllPasswords() {
        DisplayPasswordsTA.setText("");// Clear the text area first
        for (PasswordEntry entry : passwordManager.getAllPasswords()) {
            DisplayPasswordsTA.append("Domain: " + entry.getDomain() + ", Hashed Password: " + entry.getHashedPassword() + "\n");
        }
    }

    private void updatePasswordLabel() {
        SavedPasswordsNumberLBL.setText("SavedPasswords: " + passwordCount);//increment counter every saved pass
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Backgrnd = new javax.swing.JPanel();
        TitleLBL = new javax.swing.JLabel();
        SavedPasswordsNumberLBL = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DisplayPasswordsTA = new javax.swing.JTextArea();
        AddPasswordBTN = new javax.swing.JButton();
        RemovePasswordsBTN = new javax.swing.JButton();
        VerifyPasswordBTN1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Backgrnd.setBackground(new java.awt.Color(204, 255, 255));

        TitleLBL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        TitleLBL.setText(" Secure Password Manager & Verifier ");
        TitleLBL.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        SavedPasswordsNumberLBL.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        SavedPasswordsNumberLBL.setText("Saved Passwords: ");

        DisplayPasswordsTA.setColumns(20);
        DisplayPasswordsTA.setRows(5);
        jScrollPane1.setViewportView(DisplayPasswordsTA);

        AddPasswordBTN.setBackground(new java.awt.Color(153, 255, 153));
        AddPasswordBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        AddPasswordBTN.setText("Add Password");
        AddPasswordBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddPasswordBTNActionPerformed(evt);
            }
        });

        RemovePasswordsBTN.setBackground(new java.awt.Color(255, 102, 102));
        RemovePasswordsBTN.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        RemovePasswordsBTN.setText("Remove All Saved Passwords");
        RemovePasswordsBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemovePasswordsBTNActionPerformed(evt);
            }
        });

        VerifyPasswordBTN1.setBackground(new java.awt.Color(0, 153, 153));
        VerifyPasswordBTN1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        VerifyPasswordBTN1.setText("Verify Password");
        VerifyPasswordBTN1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerifyPasswordBTN1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BackgrndLayout = new javax.swing.GroupLayout(Backgrnd);
        Backgrnd.setLayout(BackgrndLayout);
        BackgrndLayout.setHorizontalGroup(
            BackgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackgrndLayout.createSequentialGroup()
                .addGroup(BackgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BackgrndLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(BackgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AddPasswordBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(VerifyPasswordBTN1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(BackgrndLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(RemovePasswordsBTN)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(BackgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SavedPasswordsNumberLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
            .addGroup(BackgrndLayout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(TitleLBL)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        BackgrndLayout.setVerticalGroup(
            BackgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgrndLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(TitleLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(BackgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BackgrndLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(SavedPasswordsNumberLBL)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(18, Short.MAX_VALUE))
                    .addGroup(BackgrndLayout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(AddPasswordBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(VerifyPasswordBTN1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RemovePasswordsBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Backgrnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(Backgrnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddPasswordBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddPasswordBTNActionPerformed
        String domain = JOptionPane.showInputDialog(this, "Enter Domain:");
        String plainPassword = JOptionPane.showInputDialog(this, "Enter Password to be encrypted");
        if (domain != null && plainPassword != null && !domain.isEmpty() && !plainPassword.isEmpty()) {
            addPassword(domain, plainPassword);
        } else {
            JOptionPane.showMessageDialog(this, "Please enter a valid domain and password.");
        }
    }//GEN-LAST:event_AddPasswordBTNActionPerformed

    private void RemovePasswordsBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemovePasswordsBTNActionPerformed
        int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete all password entries?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirmation == JOptionPane.YES_OPTION) {
            passwordManager.deleteAllPasswords();
            passwordCount = 0;
            loadAllPasswords();
            updatePasswordLabel();
        }
    }//GEN-LAST:event_RemovePasswordsBTNActionPerformed

    private void VerifyPasswordBTN1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerifyPasswordBTN1ActionPerformed
        String domain = JOptionPane.showInputDialog(this, "Enter Domain to Verify Password:");
        String inputPassword = JOptionPane.showInputDialog(this, "Enter your Password to verify its correct.");
        if (domain != null && inputPassword != null && !domain.isEmpty() && !inputPassword.isEmpty()) {
            boolean isVerified = passwordManager.verifyPassword(domain, inputPassword);
            if (isVerified) {
                JOptionPane.showMessageDialog(this, inputPassword + " is your correct password.");
            } else {
                JOptionPane.showMessageDialog(this, "Password you entered does not match your encrypted one.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please enter valid domain and password for verification.");
        }
    }//GEN-LAST:event_VerifyPasswordBTN1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PasswordManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PasswordManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PasswordManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PasswordManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PasswordManagerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddPasswordBTN;
    private javax.swing.JPanel Backgrnd;
    private javax.swing.JTextArea DisplayPasswordsTA;
    private javax.swing.JButton RemovePasswordsBTN;
    private javax.swing.JLabel SavedPasswordsNumberLBL;
    private javax.swing.JLabel TitleLBL;
    private javax.swing.JButton VerifyPasswordBTN1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
